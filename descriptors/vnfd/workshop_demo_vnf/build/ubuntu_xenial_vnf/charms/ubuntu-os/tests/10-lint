#!/usr/bin/python
##
# Copyright 2016 Canonical Ltd.
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
##

##
# Verify that the layer is:
#   - well-written, as defined by pep8/flake8?
#   - is buildable via `charm build`
from flake8.api import legacy as flake8
import logging
import pep8
import StringIO
import sys
import unittest

# These are the python files to validate.
FILES = [
    'lib/charms/sshproxy.py',
    'reactive/sshproxy.py',
]

logger = logging.getLogger(__name__)
logger.level = logging.DEBUG


class TestCharm(unittest.TestCase):

    def setUp(self):
        self.stream_handler = logging.StreamHandler(sys.stdout)
        logger.addHandler(self.stream_handler)
        self.log = logging.getLogger(__name__)

    def tearDown(self):
        logger.removeHandler(self.stream_handler)
        pass

    def test_flake8(self):
        try:
            sys.stdout = StringIO.StringIO()
            style_guide = flake8.get_style_guide(ignore=[])
            report = style_guide.check_files(FILES)
            self.assertEqual(report.total_errors, 0, sys.stdout.getvalue())
        finally:
            sys.stdout = sys.__stdout__

    def test_pep8(self):
        try:
            sys.stdout = StringIO.StringIO()
            pep8_checker = pep8.StyleGuide(format='pylint')
            report = pep8_checker.check_files(paths=FILES)
            self.assertEquals(report.get_count(), 0, report.get_statistics())
            output = sys.stdout.getvalue()
            self.log.info(output)
        finally:
            sys.stdout = sys.__stdout__


if __name__ == '__main__':
    unittest.main()
