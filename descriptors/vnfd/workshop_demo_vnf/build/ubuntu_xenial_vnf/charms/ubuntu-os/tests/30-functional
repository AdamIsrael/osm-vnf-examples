#!/usr/bin/python
##
# Copyright 2016 Canonical Ltd.
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
##

import amulet
from amulet.actions import run_action, get_action_output
import charmtools.build.builder
import logging
import os
import shlex
import shutil
import sys
from tempfile import mkdtemp
from time import sleep
import unittest

CHARM = 'dummycharm'

logger = logging.getLogger(__name__)
logger.level = logging.DEBUG


class FunctionalTests(unittest.TestCase):
    """
    todo: turn this into something importable to add some default logic for
          testing charm layers.
    """
    def setUp(self):
        self.stream_handler = logging.StreamHandler(sys.stdout)
        logger.addHandler(self.stream_handler)
        self.log = logging.getLogger(__name__)

        self.output_dir = mkdtemp()
    

    def tearDown(self):
        logger.removeHandler(self.stream_handler)
        # shutil.rmtree(self.output_dir)

    def buildCharm(self):
        """
        Building the charm is an expensive process, so it should be done once per suite of tests. A failed build should abort all tests.
        """
        # Need to set layer_path to parent directory
        old_env = os.environ
        os.environ['LAYER_PATH'] = ''

        try:
            args = "-o {} tests/{}".format(self.output_dir, CHARM)
            charmtools.build.builder.main(shlex.split(args))

            # HACK: Setup symlinks for juju-deployer
            os.mkdir("{}/builds/xenial".format(self.output_dir))
            source = "{}/builds/{}".format(self.output_dir, CHARM)
            target = "{}/builds/xenial/{}".format(self.output_dir, CHARM)
            os.symlink(source, target)
        except SystemExit:
            self.fail('Charm build failed.')

        # Restore environment variable(s)
        os.environ = old_env

        return "{}/builds/{}".format(self.output_dir, CHARM)

    def test_charm(self):
        """
        Do a full end-to-end test of the sshproxy functionality:
        - Build a dummy charm that includes the sshproxy layer
        - Deploy the dummy charm, alongside a target machine
        - Configure the dummy charm with credentials to the target machine
        - Verify the dummy charm can successfully execute commands on target

        Note: Enforce best practices with regard to security and key management.
        """
        # Build the charm
        self.log.info('Building the charm...')
        charm = self.buildCharm()

        # Deploy
        d = amulet.Deployment(series='xenial')

        # point JUJU_REPOSITORY to our temp directory
        JUJU_REPOSITORY = os.environ['JUJU_REPOSITORY']
        os.environ['JUJU_REPOSITORY'] = "{}/builds/".format(self.output_dir)

        # format to local:series/charm
        local_charm = "local:xenial/{}".format(CHARM)

        d.add('dummycharm', local_charm)
        d.add('ubuntu')
        try:
            d.setup(timeout=600)

            ubuntu_unit = d.sentry['ubuntu'][0]
            dummy_unit = d.sentry['dummycharm'][0]
            # Once both units are deployed, configure the dummycharm
            # with access
            with open('/home/stone/.local/share/juju/ssh/juju_id_rsa') as f:
                d.configure('dummycharm', {
                    'ssh-hostname': ubuntu_unit.info['public-address'],
                    'ssh-username': 'ubuntu',
                    'ssh-private-key': "".join(f.readlines()),
                })

            # Run an action
            action_id = run_action('dummycharm/0', 'run', {'command': 'hostname'})
            self.log.info("Getting status for action {}".format(action_id))
            results = get_action_output(action_id, full_output=True, timeout=10)
            if results['status'] == 'failed':
                amulet.raise_status(amulet.FAIL, msg=results['message'])
            self.log.info(results['results'])

            # Compare the hostname of ubuntu unit to the action results



        except amulet.TimeoutError:
            raise
        finally:
            os.environ['JUJU_REPOSITORY'] = JUJU_REPOSITORY


if __name__ == '__main__':
    unittest.main()
